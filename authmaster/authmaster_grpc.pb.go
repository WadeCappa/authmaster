// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: authmaster/authmaster.proto

package authmaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Authmaster_TestAuth_FullMethodName   = "/authmaster.Authmaster/TestAuth"
	Authmaster_Login_FullMethodName      = "/authmaster.Authmaster/Login"
	Authmaster_CreateUser_FullMethodName = "/authmaster.Authmaster/CreateUser"
)

// AuthmasterClient is the client API for Authmaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthmasterClient interface {
	TestAuth(ctx context.Context, in *TestAuthRequest, opts ...grpc.CallOption) (*TestAuthResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type authmasterClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthmasterClient(cc grpc.ClientConnInterface) AuthmasterClient {
	return &authmasterClient{cc}
}

func (c *authmasterClient) TestAuth(ctx context.Context, in *TestAuthRequest, opts ...grpc.CallOption) (*TestAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestAuthResponse)
	err := c.cc.Invoke(ctx, Authmaster_TestAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authmasterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Authmaster_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authmasterClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Authmaster_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthmasterServer is the server API for Authmaster service.
// All implementations must embed UnimplementedAuthmasterServer
// for forward compatibility.
type AuthmasterServer interface {
	TestAuth(context.Context, *TestAuthRequest) (*TestAuthResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedAuthmasterServer()
}

// UnimplementedAuthmasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthmasterServer struct{}

func (UnimplementedAuthmasterServer) TestAuth(context.Context, *TestAuthRequest) (*TestAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAuth not implemented")
}
func (UnimplementedAuthmasterServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthmasterServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthmasterServer) mustEmbedUnimplementedAuthmasterServer() {}
func (UnimplementedAuthmasterServer) testEmbeddedByValue()                    {}

// UnsafeAuthmasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthmasterServer will
// result in compilation errors.
type UnsafeAuthmasterServer interface {
	mustEmbedUnimplementedAuthmasterServer()
}

func RegisterAuthmasterServer(s grpc.ServiceRegistrar, srv AuthmasterServer) {
	// If the following call pancis, it indicates UnimplementedAuthmasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Authmaster_ServiceDesc, srv)
}

func _Authmaster_TestAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthmasterServer).TestAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authmaster_TestAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthmasterServer).TestAuth(ctx, req.(*TestAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authmaster_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthmasterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authmaster_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthmasterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authmaster_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthmasterServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authmaster_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthmasterServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authmaster_ServiceDesc is the grpc.ServiceDesc for Authmaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authmaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authmaster.Authmaster",
	HandlerType: (*AuthmasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestAuth",
			Handler:    _Authmaster_TestAuth_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Authmaster_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Authmaster_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authmaster/authmaster.proto",
}
